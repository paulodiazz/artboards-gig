import { IInitiator } from '@mesh/common/contracts';
import type { Action, Asset, Data, Era, Mint, Protocol, PlutusScript, Recipient, UTxO, PoolParams } from '@mesh/common/types';
export declare class Transaction {
    private _changeAddress?;
    private _recipients;
    private _totalBurns;
    private _totalMints;
    private readonly _era?;
    private readonly _initiator?;
    private readonly _protocolParameters;
    private readonly _txBuilder;
    private readonly _txCertificates;
    private readonly _txInputsBuilder;
    private readonly _txWithdrawals;
    constructor(options?: Partial<CreateTxOptions>);
    static maskMetadata(cborTx: string): string;
    static readMetadata(cborTx: string): string;
    static writeMetadata(cborTx: string, cborTxMetadata: string): string;
    get size(): number;
    build(): Promise<string>;
    burnAsset(forgeScript: string, asset: Asset): Transaction;
    delegateStake(rewardAddress: string, poolId: string): Transaction;
    deregisterStake(rewardAddress: string): Transaction;
    mintAsset(forgeScript: string, mint: Mint): Transaction;
    redeemValue(options: {
        value: UTxO | Mint;
        script: PlutusScript | UTxO;
        datum: Data | UTxO;
        redeemer?: Action;
    }): Transaction;
    registerStake(rewardAddress: string): Transaction;
    registerPool(params: PoolParams): Transaction;
    retirePool(poolId: string, epochNo: number): Transaction;
    sendAssets(recipient: Recipient, assets: Asset[]): Transaction;
    sendLovelace(recipient: Recipient, lovelace: string): Transaction;
    sendValue(recipient: Recipient, value: UTxO): Transaction;
    setChangeAddress(changeAddress: string): Transaction;
    setCollateral(collateral: UTxO[]): Transaction;
    setMetadata(key: number, value: unknown): Transaction;
    setRequiredSigners(addresses: string[]): Transaction;
    setTimeToStart(slot: string): Transaction;
    setTimeToExpire(slot: string): Transaction;
    setTxInputs(inputs: UTxO[]): Transaction;
    withdrawRewards(rewardAddress: string, lovelace: string): Transaction;
    private addBurnInputsIfNeeded;
    private addChangeAddress;
    private addCollateralIfNeeded;
    private addRequiredSignersIfNeeded;
    private addTxInputsAsNeeded;
    private forgeAssetsIfNeeded;
    private filterAvailableUTxOs;
    private selectLovelaceUTxOs;
    private addMintOutputs;
    private notVisited;
}
declare type CreateTxOptions = {
    initiator: IInitiator;
    parameters: Protocol;
    era: Era;
};
export {};

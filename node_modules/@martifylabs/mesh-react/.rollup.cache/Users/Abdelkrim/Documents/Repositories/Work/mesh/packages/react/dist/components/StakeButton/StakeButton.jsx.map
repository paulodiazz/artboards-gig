{"version":3,"file":"StakeButton.jsx","sourceRoot":"","sources":["../../../src/components/StakeButton/StakeButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import tw, { styled } from 'twin.macro';\nimport { useEffect, useState } from 'react';\nimport {\n  useRewardAddress,\n  useWallet,\n  useWalletList,\n  useWalletTx,\n} from '@mesh/hooks';\nimport { ChevronDown } from '../ChevronDown';\nimport { MenuItem } from '../MenuItem';\nimport type { AccountInfo } from '@martifylabs/mesh';\n\nconst StyledMenuButton = tw.button`\n  flex items-center justify-center\n  font-normal text-lg\n  border rounded-t-md\n  w-60 px-4 py-2\n  shadow-sm\n`;\n\nconst StyledMenuList = styled.div(({ hidden }: { hidden: boolean }) => [\n  tw`\n    shadow-sm backdrop-blur\n    border rounded-b-md\n    absolute w-60\n    text-center\n  `,\n  hidden && tw`hidden`,\n]);\n\nexport const StakeButton = ({ poolId, onCheck }) => {\n  const wallets = useWalletList();\n\n  const [hideMenuList, setHideMenuList] = useState(true);\n\n  const { connect, connecting, connected, name } = useWallet();\n\n  return (\n    <div\n      style={{ width: 'fit-content' }}\n      onMouseEnter={() => setHideMenuList(false)}\n      onMouseLeave={() => setHideMenuList(true)}\n    >\n      <StyledMenuButton\n        type=\"button\"\n        onClick={() => setHideMenuList(!hideMenuList)}\n      >\n        {connected ? (\n          <Delegate poolId={poolId} onCheck={onCheck} />\n        ) : connecting ? (\n          <>Connecting...</>\n        ) : (\n          <>\n            Connect Wallet <ChevronDown />\n          </>\n        )}\n      </StyledMenuButton>\n      <StyledMenuList hidden={hideMenuList || connected}>\n        {wallets.length > 0 ? (\n          wallets.map((wallet, index) => (\n            <MenuItem\n              key={index}\n              icon={wallet.icon}\n              label={wallet.name}\n              action={() => {\n                connect(wallet.name);\n                setHideMenuList(!hideMenuList);\n              }}\n              active={name === wallet.name}\n            />\n          ))\n        ) : (\n          <span>No Wallet Found</span>\n        )}\n      </StyledMenuList>\n    </div>\n  );\n};\n\nconst Delegate = ({ poolId, onCheck }) => {\n  const tx = useWalletTx();\n  const { wallet } = useWallet();\n  const rewardAddress = useRewardAddress();\n  const [error, setError] = useState<unknown>();\n  const [checking, setChecking] = useState(false);\n  const [accountInfo, setAccountInfo] = useState<AccountInfo>();\n  const [processing, setProcessing] = useState(false);\n  const [done, setDone] = useState(false);\n\n  const checkAccountStatus = async () => {\n    try {\n      setChecking(true);\n\n      if (rewardAddress) {\n        const info = await onCheck(rewardAddress);\n        setAccountInfo(info);\n      }\n\n      setChecking(false);\n    } catch (error) {\n      setError(error);\n    }\n  };\n\n  const registerAddress = async () => {\n    setProcessing(true);\n    setDone(false);\n    try {\n      if (rewardAddress) {\n        const unsignedTx = await tx\n          .registerStake(rewardAddress)\n          .delegateStake(rewardAddress, poolId)\n          .build();\n\n        const signedTx = await wallet.signTx(unsignedTx);\n        const txHash = await wallet.submitTx(signedTx);\n        console.log('txHash', txHash);\n        setDone(true);\n      }\n    } catch (error) {\n      console.error('error', error);\n      setError(error);\n    }\n    setProcessing(false);\n  };\n\n  const delegateStake = async () => {\n    setProcessing(true);\n    setDone(false);\n    try {\n      if (rewardAddress) {\n        const unsignedTx = await tx\n          .delegateStake(rewardAddress, poolId)\n          .build();\n\n        const signedTx = await wallet.signTx(unsignedTx);\n        const txHash = await wallet.submitTx(signedTx);\n        setDone(true);\n      }\n    } catch (error) {\n      console.error('error', error);\n      setError(error);\n    }\n    setProcessing(false);\n  };\n\n  useEffect(() => {\n    checkAccountStatus();\n  }, [rewardAddress]);\n\n  if (checking) {\n    return <span>Checking...</span>;\n  }\n  if (processing) {\n    return <span>Loading...</span>;\n  }\n  if (done) {\n    return <span>Stake Delegated</span>;\n  }\n\n  if (accountInfo?.active) {\n    return accountInfo.poolId === poolId ? (\n      <span>Stake Delegated</span>\n    ) : (\n      <span onClick={delegateStake}>Delegate Stake</span>\n    );\n  }\n\n  return <span onClick={registerAddress}>Register Address</span>;\n};\n"]}